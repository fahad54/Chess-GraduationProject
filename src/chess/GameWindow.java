/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package chess;

import java.util.Set;
import javax.swing.JOptionPane;
import chess.model.*;
/**
 *
 * @author Fahad
 */
public final class GameWindow extends javax.swing.JFrame implements GameController {

    private static final int DELAY_INT = 100;
    private Game game;
    private StatsWindow statsWindow;
    private ChessAboutBox aboutBox;
    private boolean drawBoardControl = false;
    private boolean drawPossibleMoves = true;
    private boolean isChessCoachEnabled = true;
    private TimeConditions timeConditions;

    /** Creates new form GameWindow */
    public GameWindow() {
        this.setResizable(false);
        initComponents();

        initWindows();

    }

    public void initWindows() {
        aboutBox = new ChessAboutBox(this);
        aboutBox.setLocationRelativeTo(this);
        statsWindow = new StatsWindow(this);
        statsWindow.setLocationRelativeTo(this);
        boardView.setController(this);
    }

    public void startGame(Player p1, Player p2, TimeConditions tc) {
        game = new Game(p1, p2, this);
        timeConditions = tc;

        GameThread gt = new GameThread(game);
        gt.start();
        statsWindow.startGame(tc);
        statsWindow.setVisible(true);
    }

    public boolean gameHasStarted() {
        return (game.getBoard().getGameState() == GameState.UNFINISHED);
    }

    public Board getBoard() {
        return game.getBoard();
    }

    public void showAboutBox() {

        aboutBox.setVisible(true);

    }

    public void updateBoard() {
        boardView.update(game.getBoard());

    }

    public void updateTimers() {
        statsWindow.turnMade();
    }

    public boolean isDrawBoardControlOption() {
        return drawBoardControl;
    }

    public boolean isDrawPossibleMovesOption() {
        return drawPossibleMoves;
    }

    public void prepareToMove() {
        boardView.waitForMove();
    }

    public Move getUserMove() {
        while (true) {
            if (!boardView.isWaitingForMove()) {
                return boardView.getMove();
            }
            try {
                Thread.sleep(DELAY_INT);
            } catch (InterruptedException ex) {
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        modeButtonGroup = new javax.swing.ButtonGroup();
        boardView = new chess.BoardView();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newGameMenuItem = new javax.swing.JMenuItem();
        saveGameMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        showHistoryMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        boardControlMenuItem = new javax.swing.JCheckBoxMenuItem();
        possibleMovesMenuItem = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        showAboutBoxMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        boardView.setName("boardView"); // NOI18N

        javax.swing.GroupLayout boardViewLayout = new javax.swing.GroupLayout(boardView);
        boardView.setLayout(boardViewLayout);
        boardViewLayout.setHorizontalGroup(
            boardViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        boardViewLayout.setVerticalGroup(
            boardViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(chess.ChessApp.class).getContext().getResourceMap(GameWindow.class);
        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        newGameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newGameMenuItem.setText(resourceMap.getString("newGameMenuItem.text")); // NOI18N
        newGameMenuItem.setName("newGameMenuItem"); // NOI18N
        newGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(newGameMenuItem);

        saveGameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveGameMenuItem.setText(resourceMap.getString("saveGameMenuItem.text")); // NOI18N
        saveGameMenuItem.setName("saveGameMenuItem"); // NOI18N
        jMenu1.add(saveGameMenuItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        jMenu1.add(jSeparator1);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(chess.ChessApp.class).getContext().getActionMap(GameWindow.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N

        modeButtonGroup.add(jRadioButtonMenuItem1);
        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText(resourceMap.getString("jRadioButtonMenuItem1.text")); // NOI18N
        jRadioButtonMenuItem1.setName("jRadioButtonMenuItem1"); // NOI18N
        jMenu2.add(jRadioButtonMenuItem1);

        modeButtonGroup.add(jRadioButtonMenuItem2);
        jRadioButtonMenuItem2.setText(resourceMap.getString("jRadioButtonMenuItem2.text")); // NOI18N
        jRadioButtonMenuItem2.setName("jRadioButtonMenuItem2"); // NOI18N
        jMenu2.add(jRadioButtonMenuItem2);

        jSeparator2.setName("jSeparator2"); // NOI18N
        jMenu2.add(jSeparator2);

        showHistoryMenuItem.setSelected(true);
        showHistoryMenuItem.setText(resourceMap.getString("showHistoryMenuItem.text")); // NOI18N
        showHistoryMenuItem.setName("showHistoryMenuItem"); // NOI18N
        showHistoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHistoryMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(showHistoryMenuItem);

        jSeparator3.setName("jSeparator3"); // NOI18N
        jMenu2.add(jSeparator3);

        boardControlMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        boardControlMenuItem.setSelected(true);
        boardControlMenuItem.setText(resourceMap.getString("boardControlMenuItem.text")); // NOI18N
        boardControlMenuItem.setName("boardControlMenuItem"); // NOI18N
        boardControlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boardControlMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(boardControlMenuItem);

        possibleMovesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        possibleMovesMenuItem.setSelected(true);
        possibleMovesMenuItem.setText(resourceMap.getString("possibleMovesMenuItem.text")); // NOI18N
        possibleMovesMenuItem.setName("possibleMovesMenuItem"); // NOI18N
        possibleMovesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                possibleMovesMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(possibleMovesMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu3.setText(resourceMap.getString("jMenu3.text")); // NOI18N
        jMenu3.setName("jMenu3"); // NOI18N

        showAboutBoxMenuItem.setText(resourceMap.getString("showAboutBoxMenuItem.text")); // NOI18N
        showAboutBoxMenuItem.setName("showAboutBoxMenuItem"); // NOI18N
        showAboutBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAboutBoxMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(showAboutBoxMenuItem);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(boardView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(boardView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>

    private void showAboutBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        showAboutBox();
    }

    private void showHistoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (statsWindow.isVisible()) {
            statsWindow.setVisible(false);
            showHistoryMenuItem.setText("Show Game Stats");
        } else {
            statsWindow.setVisible(true);
            showHistoryMenuItem.setText("Hide Game Stats");
        }
    }

    private void boardControlMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (boardControlMenuItem.isSelected()) {
            drawBoardControl = true;
        } else {
            drawBoardControl = false;
        }
    }

    private void possibleMovesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (possibleMovesMenuItem.isSelected()) {
            drawPossibleMoves = true;
        } else {
            drawPossibleMoves = false;
        }
    }

    private void newGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        int n = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to start a new game? The current game will be lost.\n"
                + "It is recommended to save before closing.",
                "New Game",
                JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.CANCEL_OPTION) {
        }
        if (n == JOptionPane.OK_OPTION) {
            startNewGame();
            GameSetupWindow setupWindow = new GameSetupWindow(this, true);
            statsWindow.setVisible(false);
            this.setVisible(false);
            setupWindow.setLocationRelativeTo(ChessApp.getApplication().getMainFrame());
            setupWindow.setVisible(true);
            statsWindow.dispose();
            dispose();
        }

    }
    // Variables declaration - do not modify
    private javax.swing.JCheckBoxMenuItem boardControlMenuItem;
    private chess.BoardView boardView;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.ButtonGroup modeButtonGroup;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JCheckBoxMenuItem possibleMovesMenuItem;
    private javax.swing.JMenuItem saveGameMenuItem;
    private javax.swing.JMenuItem showAboutBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem showHistoryMenuItem;
    // End of variables declaration

    public TeamEnum getWhoseTurnItIs() {
        return game.getTurn();
    }

    private void startNewGame() {
        System.out.println("New Game");
    }

    public void setIsHistoryWindowVisible(boolean flag) {
        if (flag) {
            showHistoryMenuItem.setText("Hide Game Stats");
            showHistoryMenuItem.setSelected(true);
        } else {
            showHistoryMenuItem.setText("Show Game Stats");
            showHistoryMenuItem.setSelected(false);
        }
    }

    public void resetMoveList(Set<PGNMove> moveList) {
        statsWindow.clearMoveList();
    }

    public void addMove(PGNMove move) {
        statsWindow.addMove(move);
    }

    public void setMoveList(Set<PGNMove> moveList) {
        statsWindow.setMoveList(moveList);
    }

    public PGNMove refineMoveObject(Move move) {
        return game.refineMoveObject(move);
    }

    public void setPreviousMove(PGNMove refinedMove) {
        boardView.setPreviousMove(refinedMove);
    }

    public void setNotice(Notice n) {
        statsWindow.setNotice(n);
    }

    public void setNoticeTitle(String t) {
        statsWindow.setNoticeTitle(t);
    }

    public void setNoticeBody(String t) {
        statsWindow.setNoticeBody(t);
    }

    public int getTimeRemaining(TeamEnum teamInQuestion) {
        return statsWindow.getTime(teamInQuestion);
    }

    public TimeConditions getTimeConditions() {
        return timeConditions;
    }

    public void timeHasRunOut(TeamEnum teamWhoForfeits) {
        game.setTeamForfeitsOnTime(teamWhoForfeits);
    }

    public void setGameOver() {
        statsWindow.cancelTimers();
        boardView.setIsBoardLive(false);
    }

    public PieceType askForPromotionType(TeamEnum team) {
        PiecePromotionDialog ppd = new PiecePromotionDialog(this, true, team);
        ppd.setLocationRelativeTo(this);
        ppd.setVisible(true);
        PieceType p = ppd.getPieceType();
        ppd.dispose();
        return p;
    }

    public void updateCapturedPieces(Set<Piece> set) {
        statsWindow.setCapturedPieces(set);
    }

    private class GameThread extends Thread {

        private Game game;

        public GameThread(Game g) {
            this.game = g;
        }

        @Override
        public void run() {
            game.start();
        }
    }
}
